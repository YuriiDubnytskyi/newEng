{"version":3,"sources":["store/actions/actions.ts","store/actions/actionTypes.ts","components/Header/Header.tsx","api/api.ts","components/LoginPage/LoginPage.tsx","containers/Login.tsx","components/MainPage/MainPage.tsx","services/service.ts","components/BooksPage/BookPage/BookPage.tsx","components/BooksPage/CarouselBooks/CarouselBooks.tsx","components/BooksPage/BooksPage.tsx","components/UnitsPage/UnitPage/UnitPage.tsx","components/UnitsPage/CarouselUnits/CarouselUnits.tsx","components/UnitsPage/UnitsPage.tsx","components/LearnPage/LearnPage.tsx","containers/UserPage.tsx","components/AddBook/AddBook.tsx","components/AddUnit/AddUnit.tsx","components/AddWords/AddWords.tsx","containers/AddInfo.tsx","App.tsx","serviceWorker.ts","store/utility.ts","store/reducers/login.ts","store/reducers/books.ts","store/reducers/units.ts","store/reducers/words.ts","index.tsx"],"names":["login","type","getBooks","dataBooks","id","showBooks","getUnits","dataUnits","showUnits","smart","tablet","laptop","large","getWords","dataWords","prew","nexting","reset","keyUnit","key","keyWord","connect","state","books","dispatch","bindActionCreators","props","className","to","htmlFor","data-toggle","data-target","aria-expanded","aria-controls","onClick","getWordTranslate","word","axios","get","loginUser","useState","name","setName","password","setPassword","history","useHistory","placeholder","value","onChange","e","target","role","API","parseInt","then","res","data","push","console","log","Login","path","exact","MainPage","getSize","width","window","innerWidth","height","innerHeight","getArrayAndId","fn","variant","_id","version","keyunit","units","setShowBooks","useEffect","showBooking","data-slide","length","map","el","isAdmin","words","keyWords","alert","setShowUnits","showUniting","UnitsPage","fullWords","randomSize","setWord","rightWord","setRightWord","right","setRight","wrong","setWrong","userWord","setUserWord","userWell","setUserWell","num","Math","floor","random","text","setInterval","UserPage","bookName","setBookName","bookVersion","setBookVersion","unitKey","setUnitKey","addBook","base","fullBooks","book","put","numberUnits","setNumberUnits","arrayUnit","i","numI","number","post","setWords","rows","arr","split","isAutofication","AddInfo","Boolean","location","hostname","match","updateObject","oldObject","updatedValues","initialState","action","indexEnd","indexStart","getArrayShow","begin","end","slice","getPrewBegin","getPrewEnd","getNextBegin","getNextEnd","fullUnits","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","result","getState","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8e12837.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\ntype arrayBooks={ name:string, version:string, keyUnit:number }[]\r\ntype arrayUnits={ name:string, version:string, keyWords:number }[]\r\n\r\nexport const login = () => {\r\n    return {\r\n        type: actionTypes.LOGIN\r\n    };\r\n};\r\nexport const getBooks = (dataBooks:arrayBooks,id:number) => {\r\n    return {\r\n        type: actionTypes.GET_BOOKS,\r\n        dataBooks:dataBooks,\r\n        id:id\r\n    };\r\n};\r\nexport const showBooks = () => {\r\n    return {\r\n        type: actionTypes.SET_SHOW_BOOKS\r\n    };\r\n};\r\nexport const getUnits = (dataUnits:arrayUnits) => {\r\n    return {\r\n        type: actionTypes.GET_UNITS,\r\n        dataUnits:dataUnits\r\n    };\r\n};\r\nexport const showUnits = () => {\r\n    return {\r\n        type: actionTypes.SET_SHOW_UNITS\r\n    };\r\n};\r\nexport const smart = () => {\r\n    return {\r\n        type: actionTypes.SMART\r\n    };\r\n};\r\nexport const tablet = () => {\r\n    return {\r\n        type: actionTypes.TABLET\r\n    };\r\n};\r\nexport const laptop = () => {\r\n    return {\r\n        type: actionTypes.LAPTOP\r\n    };\r\n};\r\nexport const large = () => {\r\n    return {\r\n        type: actionTypes.LARGE\r\n    };\r\n};\r\nexport const getWords = (dataWords:string[]) => {\r\n    return {\r\n        type: actionTypes.GET_WORDS,\r\n        dataWords:dataWords\r\n    };\r\n};\r\nexport const prew = () => {\r\n    return {\r\n        type: actionTypes.PREW\r\n    };\r\n};\r\nexport const nexting = () => {\r\n    return {\r\n        type: actionTypes.NEXT\r\n    };\r\n};\r\nexport const reset = () => {\r\n    return {\r\n        type: actionTypes.RESET\r\n    };\r\n};\r\nexport const keyUnit = (key:number) => {\r\n    return {\r\n        type: actionTypes.KEY_UNIT,\r\n        key:key\r\n    };\r\n};\r\nexport const keyWord = (key:number) => {\r\n    return {\r\n        type: actionTypes.KEY_WORDS,\r\n        key:key\r\n    };\r\n};","export const LOGIN = 'LOGIN';\r\nexport const GET_BOOKS = \"GET_BOOKS\";\r\nexport const SET_SHOW_BOOKS = \"SET_SHOW_BOOKS\";\r\nexport const GET_UNITS = \"GET_UNITS\";\r\nexport const SET_SHOW_UNITS = \"SET_SHOW_UNITS\";\r\nexport const GET_WORDS = \"GET_WORDS\";\r\nexport const SMART = \"SMART\";\r\nexport const TABLET = \"TABLET\";\r\nexport const LAPTOP = \"LAPTOP\";\r\nexport const LARGE = \"LARGE\";\r\nexport const PREW = \"PREW\";\r\nexport const NEXT = \"NEXT\";\r\nexport const RESET = \"RESET\";\r\nexport const KEY_UNIT = \"KEY_UNIT\";\r\nexport const KEY_WORDS = \"KEY_WORDS\";","import React ,{FC}from 'react';\r\nimport \"./Header.css\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {reset} from \"../../store/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {IreduceBooks} from \"../../interfaces/IreduceBooks\";\r\n\r\ntype HeaderProps = {\r\n    reset:() => {type:string}\r\n}\r\n\r\nconst Header:FC<HeaderProps> = (props:HeaderProps) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <NavLink className=\"navbar-brand\" to=\"/\">DUBNYTSKYI_CORPORATION</NavLink>\r\n            <input type=\"checkbox\" id=\"navbar-toggle-cbox\"/>\r\n            <label htmlFor=\"navbar-toggle-cbox\" className=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\r\n                <span className=\"sr-only\">Toggle navigation</span>\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </label>\r\n            <div className=\"collapse navbar-collapse\"  id=\"navbarNav\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\" >\r\n                        <NavLink className=\"nav-link\" data-toggle=\"collapse\" to=\"/\" >Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" data-toggle=\"collapse\" to=\"/books\" onClick={()=>props.reset()}>Books</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" data-toggle=\"collapse\" to=\"/admin\" >Administration</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nconst mapStateToProps = ( state:{ books:IreduceBooks } ) => {\r\n    return {\r\n        state: state.books\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            reset\r\n        }, dispatch)\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Header);","import axios from \"axios\"\r\nimport {IaddBook} from \"../interfaces/IaddBook\";\r\nimport {IaddUnits} from \"../interfaces/IaddUnits\";\r\nimport {IaddWords} from \"../interfaces/IaddWords\";\r\n\r\nexport const getAdmin = (name:string,password:number) => axios.get(\"/admin/\"+name+\"/\"+password);\r\n\r\nexport const getBooks = () => axios.get(\"/books\");\r\n\r\nexport const getUnit = (key:number) => axios.get(\"/units/\"+key);\r\n\r\nexport const getWord = (key:number) => axios.get(\"/words/\"+key);\r\n\r\nexport const putBook = (addBook:IaddBook) => axios.put(\"/addBook\",addBook);\r\n\r\nexport const postUnits = (data:IaddUnits) => axios.post(\"/addUnits\",data);\r\n\r\nexport const putWords = (data:IaddWords) => axios.put(\"/addWords\",data);\r\n\r\nexport const getWordTranslate = (word:string) => axios.get(\"https://translate.yandex.net/api/v1.5/tr.json/translate?lang=uk&key=trnsl.1.1.20190518T054559Z.6098481762cecacb.6b721345d2262aa024e24b0aa7bbc42011422525&text=\" + word + \"&lang=uk&format=plain\");\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport {\r\n    login\r\n} from \"../../store/actions/actions\"\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as API from \"./../../api/api\"\r\nimport {IreduceLogin} from \"../../interfaces/IreduceLogin\";\r\n\r\ntype LoginPageProps = {\r\n    login:() => {type:string}\r\n}\r\n\r\nconst LoginPage:FC<LoginPageProps> = (props:LoginPageProps) => {\r\n\r\n    const [name,setName] = useState<string>('');\r\n    const [password,setPassword] = useState<string>('');\r\n\r\n    const history = useHistory();\r\n\r\n    const onChangeName = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.target.value)\r\n    };\r\n    const onChangePassword = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.target.value)\r\n    };\r\n\r\n    const login = ():void => {\r\n        API.getAdmin(name,parseInt(password))\r\n            .then(res => !!res.data && res.data.name === name && res.data.password === parseInt(password) ?\r\n                                    props.login()\r\n                                    :false)\r\n            .then(res => res?history.push(\"/books\"):console.log(\"err\"))\r\n            .then(()=>{\r\n                setName('');\r\n                setPassword('');\r\n            })\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"row margin-t\">\r\n                <div className=\"col-lg-10 mx-auto\">\r\n                    <h1 className=\"text-uppercase text-center\"><strong>Login Form</strong></h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex-column justify-content-center text-center\">\r\n                <div className=\"form-group m-5\">\r\n                    <h2>Write admin name</h2>\r\n                    <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Name\" value={name} onChange={onChangeName}/>\r\n                    <h2>Write admin password</h2>\r\n                    <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Password\" value={password} onChange={onChangePassword}/>\r\n                </div>\r\n                <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\" onClick={login}>LogIn</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state:{login:IreduceLogin}) => {\r\n    return {\r\n        loginUser:state.login\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n                login\r\n            }, dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);","import React,{FC} from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\nimport LoginPage from \"./../components/LoginPage/LoginPage\";\r\n\r\nconst Login:FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/admin\" exact>\r\n                <LoginPage/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Login","import React ,{FC}from 'react';\r\nimport \"./MainPage.css\"\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nconst MainPage:FC = () => {\r\n    return (\r\n        <div className=\"main-content-greeting\">\r\n        <div className=\"text-center mt-5 \">\r\n            <div className=\"container mt-5 align-items-center \">\r\n                <div className=\"row margin-t-greeting\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase\"><strong>You can learn a lot of different words with us</strong></h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-8 mx-auto\">\r\n                    <h2 className=\"text-faded mb-6 display-8\">You can learn more and more words with us and improve your skills</h2>\r\n                    <NavLink className=\"btn btn-dark btn-xl js-scroll-trigger rounded-pill \" role=\"button\" to=\"/books\">Go Learn</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MainPage","export const getSize = ():string =>{\r\n    const width:number = window.innerWidth;\r\n    const height:number = window.innerHeight;\r\n    if(width > 1430 && height > 850){\r\n        return \"large\"\r\n    }else if(width > 1350 && height > 660){\r\n        return \"laptop\"\r\n    }else if(width > 760 && height > 700 ){\r\n        return \"tablet\"\r\n    }else {\r\n        return \"mobile\"\r\n    }\r\n};\r\nexport const getArrayAndId = (data:any,fn:any,variant?:number) => {\r\n    console.log(data);\r\n    if(variant === 2){\r\n        fn(data.books,data._id);\r\n        return true\r\n    }\r\n    fn(data[0].books,data[0]._id);\r\n    return true\r\n};","import React ,{FC}from 'react';\r\nimport \"./BookPage.css\"\r\nimport { useHistory} from \"react-router-dom\"\r\nimport { getUnits, laptop, large,  showUnits, smart, tablet,keyUnit} from \"../../../store/actions/actions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport * as API from \"./../../../api/api\"\r\nimport {getSize} from \"../../../services/service\";\r\nimport {IreduceLogin} from \"../../../interfaces/IreduceLogin\";\r\n\r\ntype arrayUnits={ name:string, version:string, keyWords:number }[]\r\n\r\ntype BookPageProps = {\r\n    name:string;\r\n    version:string;\r\n    keyunit:number;\r\n    large:() => {type:string};\r\n    laptop:() => {type:string};\r\n    tablet:() => {type:string};\r\n    smart:() => {type:string};\r\n    showUnits:() => {type:string};\r\n    keyUnit:(key:number) => {type:string,key:number};\r\n    getUnits:(dataUnits:arrayUnits) => {type:string,dataUnits:arrayUnits};\r\n}\r\n\r\nconst BookPage:FC<BookPageProps> = (props:BookPageProps) => {\r\n    const history = useHistory();\r\n\r\n    const goUnit = () => {\r\n        API.getUnit(props.keyunit)\r\n            .then(res => !!res.data?props.getUnits(res.data.units)\r\n                :false)\r\n            .then(res => res ? getSize():false)\r\n            .then(res => {\r\n                if(res === \"large\"){\r\n                    props.large();\r\n                    return true\r\n                }else if(res === \"laptop\"){\r\n                    props.laptop();\r\n                    return true\r\n                }else if(res === \"tablet\"){\r\n                    props.tablet();\r\n                    return true\r\n                }else if(res === \"mobile\"){\r\n                    props.smart();\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n            })\r\n            .then(res => res ? props.showUnits():false)\r\n            .then(()=> props.keyUnit(props.keyunit))\r\n            .then(() => history.push('/units'))\r\n    };\r\n\r\n    return (\r\n        <div className=\"card m-3\" >\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.name}</h5>\r\n                <h6 className=\"card-subtitle mb-2 text-muted\">{props.version}</h6>\r\n                <p className=\"card-text\">Information Information Information Information Information  ---- {props.keyunit}</p>\r\n                <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\" onClick={goUnit}>Lets Go</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state:{login:IreduceLogin}) => {\r\n    return {\r\n        loginUser:state.login\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getUnits,showUnits,smart,tablet,laptop,large,keyUnit\r\n        }, dispatch)\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(BookPage);","import React ,{FC,useEffect,useState}from 'react';\r\nimport BookPage from \"../BookPage/BookPage\";\r\nimport \"./CarouselBooks.css\"\r\nimport {connect} from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { showBooks, prew,nexting} from \"../../../store/actions/actions\";\r\nimport {IreduceBooks} from \"../../../interfaces/IreduceBooks\";\r\n\r\n\r\ntype CarouselBooksProps = {\r\n    prew:() => {type:string};\r\n    nexting: () => {type:string};\r\n    state:IreduceBooks;\r\n    showBooks:() => {type:string};\r\n}\r\n\r\nconst CarouselBooks:FC<CarouselBooksProps> = (props:CarouselBooksProps) => {\r\n\r\n    const [showBooks,setShowBooks] = useState<{ name:string, version:string, keyUnit:number }[]>([]);\r\n    useEffect(()=>{\r\n        setShowBooks(props.state.showBooking)\r\n    });\r\n\r\n    const prew = ():void => {\r\n        props.prew();\r\n        props.showBooks();\r\n    };\r\n    const next = ():void => {\r\n        props.nexting();\r\n        props.showBooks();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row justify-content-center text-center\">\r\n                <a className=\"carousel-control-next carousel\" role=\"button\" data-slide=\"next\" onClick={next}>\r\n                    <p className=\"carousel-control-next-icon\"></p>\r\n                </a>\r\n                {showBooks.length!==0?showBooks.map((el:{ name:string, version:string, keyUnit:number })=><BookPage name={el.name} version={el.version} keyunit={el.keyUnit}/>):<p>Eror</p>}\r\n                <a className=\"carousel-control-prev carousel\" role=\"button\" data-slide=\"prev\" onClick={prew}>\r\n                    <p className=\"carousel-control-prev-icon\"></p>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{ books:IreduceBooks } ) => {\r\n    return {\r\n        state: state.books\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            showBooks,prew,nexting\r\n        }, dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CarouselBooks);","import React ,{FC,useEffect}from 'react';\r\nimport \"./BooksPage.css\"\r\nimport CarouselBooks from \"./CarouselBooks/CarouselBooks\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport { bindActionCreators } from \"redux\";\r\nimport { reset} from \"../../store/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport {IreduceBooks} from \"../../interfaces/IreduceBooks\";\r\ntype BooksPageProps = {\r\n    isAdmin:boolean;\r\n    reset:() => {type:string}\r\n}\r\n\r\nconst BooksPage:FC<BooksPageProps> = (props:BooksPageProps) => {\r\n    const isAdmin:boolean=props.isAdmin;\r\n    useEffect(()=>{\r\n        props.reset()\r\n    },[]);\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>English Books</strong></h1>\r\n                    </div>\r\n                </div>\r\n                <CarouselBooks/>\r\n                {isAdmin?\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"my-auto \">\r\n                            <NavLink to=\"/addbook\" className=\"btn btn-dark rounded-pill text-center \">Add Book</NavLink>\r\n                        </div>\r\n                    </div>\r\n                    : <></>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst mapStateToProps = ( state:{ books:IreduceBooks } ) => {\r\n    return {\r\n        state: state.books\r\n    }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            reset\r\n        }, dispatch)\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(BooksPage)","import React ,{FC}from 'react';\r\nimport \"./UnitPage.css\"\r\nimport { useHistory} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\";\r\nimport {getWords,keyWord} from \"../../../store/actions/actions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as API from \"./../../../api/api\"\r\nimport {IreduceWords} from \"../../../interfaces/IreduceWords\";\r\n\r\ntype UnitPageProps = {\r\n    isAdmin:boolean;\r\n    name:string;\r\n    version:string;\r\n    keyWords:number;\r\n    getWords:(dataWords:string[]) => {type:string,dataWords:string[]};\r\n    keyWord:(key:number) => {type:string,key:number}\r\n}\r\n\r\nconst UnitPage:FC<UnitPageProps> = (props:UnitPageProps) => {\r\n\r\n    const isAdmin:boolean=props.isAdmin;\r\n    const history = useHistory();\r\n\r\n    const goWords = () => {\r\n        API.getWord(props.keyWords)\r\n            .then(res => !!res.data?props.getWords(res.data.words)\r\n                :console.log(res))\r\n            .then(res => res ? history.push('/unit'):alert(\"This unit has not words\"))\r\n    };\r\n\r\n    const addWords = ():void => {\r\n        props.keyWord(props.keyWords);\r\n        history.push(\"/addwords\")\r\n    };\r\n\r\n    return (\r\n        <div className=\"card m-3\" >\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.name} {props.version}</h5>\r\n                <p className=\"card-text\">Information Information Information Information Information Information ----- --- {props.keyWords}</p>\r\n                <p className=\"btn btn-dark rounded-pill \" onClick={goWords}>Lets Go</p>\r\n                <hr/>\r\n                {isAdmin?<p className=\"btn btn-dark rounded-pill\" onClick={addWords}>Add Words</p>:<></>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst mapStateToProps = ( state:{ words:IreduceWords } ) => {\r\n    return {\r\n        state: state.words\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getWords,keyWord\r\n        }, dispatch)\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UnitPage);\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport UnitPage from \"../UnitPage/UnitPage\";\r\nimport \"./CarouselUnits.css\"\r\nimport { nexting, prew,showUnits} from \"../../../store/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {IreduceUnits} from \"../../../interfaces/IreduceUnits\";\r\n\r\ntype CarouselUnitsProps = {\r\n    prew:() => {type:string};\r\n    nexting: () => {type:string};\r\n    state:IreduceUnits;\r\n    showUnits:() => {type:string};\r\n    isAdmin:boolean;\r\n}\r\n\r\nconst CarouselUnits:FC<CarouselUnitsProps> = (props:CarouselUnitsProps) => {\r\n    const isAdmin:boolean=props.isAdmin;\r\n\r\n    const [showUnits,setShowUnits] = useState<{ name:string, version:string, keyWords:number }[]>([]);\r\n    useEffect(()=>{\r\n        setShowUnits(props.state.showUniting)\r\n    });\r\n\r\n    const prew = ():void => {\r\n        props.prew();\r\n        props.showUnits();\r\n    };\r\n    const next = ():void => {\r\n        props.nexting();\r\n        props.showUnits();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row justify-content-center text-center\">\r\n                <a className=\"carousel-control-next carousel\" role=\"button\" data-slide=\"next\" onClick={next}>\r\n                    <p className=\"carousel-control-next-icon \" ></p>\r\n                </a>\r\n                {showUnits.length!==0?showUnits.map((el:{ name:string, version:string, keyWords:number })=><UnitPage name={el.name} version={el.version} keyWords={el.keyWords} isAdmin={isAdmin}/>):<p>Eror</p>}\r\n                <a className=\"carousel-control-prev carousel\" role=\"button\" data-slide=\"prev\" onClick={prew}>\r\n                    <p className=\"carousel-control-prev-icon\" ></p>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{ units:IreduceUnits } ) => {\r\n    return {\r\n        state: state.units\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            prew,nexting,showUnits\r\n        }, dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CarouselUnits);","import React ,{FC}from 'react';\r\nimport \"./UnitsPage.css\"\r\nimport CarouselUnits from \"./CarouselUnits/CarouselUnits\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\ntype UnitsPageProps = {\r\n    isAdmin:boolean\r\n}\r\n\r\nconst UnitsPage:FC<UnitsPageProps> = (props:UnitsPageProps) => {\r\n    const isAdmin:boolean=props.isAdmin;\r\n\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>Unit №</strong></h1>\r\n                    </div>\r\n                </div>\r\n                <CarouselUnits isAdmin={isAdmin}/>\r\n                {isAdmin?\r\n                    <div className=\"row justify-content-center\">\r\n                    <div className=\"my-auto \">\r\n                            <NavLink to=\"/addunit\" className=\"btn btn-dark rounded-pill text-center \">Add Unit</NavLink>\r\n                        </div>\r\n                    </div>\r\n                    :<></>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UnitsPage","import React, {FC, useState, useEffect, ChangeEvent} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport * as API from \"./../../api/api\"\r\nimport {IreduceWords} from \"../../interfaces/IreduceWords\";\r\n\r\ntype LearnPageProps = {\r\n    state:IreduceWords\r\n}\r\n\r\nconst LearnPage:FC<LearnPageProps> = (props:LearnPageProps) => {\r\n\r\n    const words = props.state.fullWords;\r\n    const randomSize = props.state.fullWords.length;\r\n\r\n    const [word,setWord] = useState<string>('');\r\n    const [rightWord,setRightWord] = useState<string>('');\r\n    let [right,setRight] = useState<number>(0);\r\n    let [wrong, setWrong] = useState<number>(0);\r\n    const [userWord, setUserWord] = useState<string>('');\r\n    let [userWell,setUserWell] = useState<string>('');\r\n\r\n    const setUserWordHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setUserWord(e.target.value);\r\n    };\r\n\r\n    const checkWord = () => {\r\n        if (userWord === rightWord) {\r\n            setRight(right + 1);\r\n            setUserWell('true');\r\n        } else {\r\n            setWrong(wrong + 1);\r\n            setUserWell('false');\r\n        }\r\n        setInterval(() => {\r\n            setUserWell('undefined');\r\n        }, 5000);\r\n\r\n\r\n        const num:number = Math.floor(Math.random() * randomSize);\r\n        setWord(words[num]);\r\n        setUserWord('');\r\n        API.getWordTranslate(words[num])\r\n            .then(res => {\r\n                setRightWord(res.data.text[0]);\r\n            })\r\n    };\r\n\r\n    useEffect(()=>{\r\n        const num = Math.floor(Math.random()*randomSize);\r\n        setWord(words[num]);\r\n\r\n        API.getWordTranslate(words[num])\r\n            .then(res=>{\r\n                setRightWord(res.data.text[0]);\r\n                console.log(res.data.text)\r\n            })\r\n    },[]);\r\n\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>Learning</strong></h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-flex justify-content-around\">\r\n                <div>\r\n                    <h2 className=\"text-uppercase text-center\">Lets go</h2>\r\n                    <h3 className=\"text-uppercase text-center\"><strong>So what does it mean</strong></h3>\r\n                    <p className=\"display-3 text-center\">{word}</p>\r\n                </div>\r\n                <div>\r\n                    <h2 className=\"text-uppercase text-center\">Score</h2>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">Right words ---- <span>{right}</span></h5>\r\n                            <h5 className=\"card-title\">Wrong words ---- <span>{wrong}</span></h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                {userWell==='true'?\r\n                <div className=\"alert alert-success text-center\" role=\"alert\">\r\n                    Success\r\n                </div>:<></>\r\n                }\r\n                {userWell===\"false\"?\r\n                <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                    Wrong. A right word is -- {rightWord}\r\n                </div>:<></>\r\n                }\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"flex-column justify-content-center text-center\">\r\n                    <div className=\"form-group\">\r\n                        <label>Example label</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Example input placeholder\" value={userWord} onChange={setUserWordHandler}/>\r\n                    </div>\r\n                    <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\"  onClick={checkWord}>Go Learn</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ( state:{ words:IreduceWords } ) => {\r\n    return {\r\n        state: state.words\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(LearnPage);","import React , {FC} from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\nimport MainPage from \"./../components/MainPage/MainPage\";\r\nimport BooksPage from \"./../components/BooksPage/BooksPage\";\r\nimport UnitsPage from \"./../components/UnitsPage/UnitsPage\";\r\nimport LearnPage from \"./../components/LearnPage/LearnPage\";\r\n\r\ntype UserPageProps = {\r\n    isAdmin:boolean\r\n}\r\n\r\nconst UserPage:FC<UserPageProps> = (props:UserPageProps) => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <MainPage/>\r\n            </Route>\r\n            <Route path=\"/books\" exact>\r\n                <BooksPage isAdmin={props.isAdmin}/>\r\n            </Route>\r\n            <Route path=\"/units\" exact>\r\n                <UnitsPage isAdmin={props.isAdmin}/>\r\n            </Route>\r\n            <Route path=\"/unit\" exact>\r\n                <LearnPage/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default UserPage","import React, {FC, useState,ChangeEvent} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {showBooks,getBooks} from \"../../store/actions/actions\";\r\nimport * as API from \"./../../api/api\"\r\nimport {IaddBook} from \"../../interfaces/IaddBook\";\r\nimport {IreduceBooks} from \"../../interfaces/IreduceBooks\";\r\nimport {getArrayAndId} from \"../../services/service\";\r\n\r\ntype arrayBooks={ name:string, version:string, keyUnit:number }[]\r\n\r\ntype AddBookProps = {\r\n    books:IreduceBooks;\r\n    showBooks:() => {type:string};\r\n    getBooks:(dataBooks:arrayBooks,id:number) => {type:string,id:number,dataBooks:arrayBooks};\r\n}\r\n\r\nconst AddBook:FC<AddBookProps> = (props:AddBookProps) => {\r\n\r\n    const [bookName,setBookName] = useState<string>('');\r\n    const [bookVersion,setBookVersion] = useState<string>('');\r\n    const [unitKey,setUnitKey] = useState<number>(0);\r\n\r\n    const history = useHistory();\r\n\r\n    const onChangeName = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setBookName(e.target.value)\r\n    };\r\n    const onChangeVersion = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setBookVersion(e.target.value)\r\n    };\r\n    const onChangeUnitKey = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setUnitKey(parseInt(e.target.value))\r\n    };\r\n\r\n    const addBook = ():void => {\r\n        const addBook:IaddBook = {\r\n            id:props.books.id,\r\n            base:props.books.fullBooks,\r\n            book:{name:bookName,version:bookVersion,keyUnit:unitKey}\r\n        };\r\n        API.putBook(addBook)\r\n            .then((res) => getArrayAndId(res.data,props.getBooks,2) )\r\n            .then(() => props.showBooks())\r\n            .then(() => history.push(\"/books\"))\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>Add Book</strong></h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"flex-column justify-content-center text-center\">\r\n                    <div className=\"form-group\">\r\n                        <label>Book name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Book name\" onChange={onChangeName}/>\r\n                        <label>Book version</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Book version\" onChange={onChangeVersion}/>\r\n                        <label>Units number</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Units number\" onChange={onChangeUnitKey}/>\r\n                    </div>\r\n                    <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\" onClick={addBook}>Add Book</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state:{books:IreduceBooks}) => {\r\n    return {\r\n        books:state.books\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            showBooks,getBooks\r\n        }, dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddBook);","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport {bindActionCreators} from \"redux\";\r\nimport {showUnits} from \"../../store/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport * as API from \"./../../api/api\"\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {IaddUnits} from \"../../interfaces/IaddUnits\";\r\nimport {IreduceUnits} from \"../../interfaces/IreduceUnits\";\r\n\r\ntype AddUnitProps = {\r\n    units:IreduceUnits;\r\n    showUnits:() => {type:string};\r\n}\r\n\r\nconst AddUnit:FC<AddUnitProps> = (props:AddUnitProps) => {\r\n\r\n    const [numberUnits,setNumberUnits] = useState<string>('');\r\n\r\n    const onChangeNumbers = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNumberUnits(e.target.value)\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    const addUnits = ():void => {\r\n        const arrayUnit: { name:string, version:number, keyWords:number }[]= [];\r\n        for(let i:number = 0 ;i < parseInt(numberUnits); i++){\r\n            let numI:number = i+1;\r\n            let number:string = \"\"+props.units.keyUnit+\"00\"+ numI;\r\n            console.log(\"\"+props.units.keyUnit+\"00\"+ numI);\r\n            arrayUnit.push({name:\"Unit\",version:i+1,keyWords:parseInt(number)});\r\n        }\r\n\r\n        const data:IaddUnits = {units:arrayUnit,key:props.units.keyUnit};\r\n\r\n        API.postUnits(data)\r\n            .then(res => console.log(res))\r\n            .then(() => history.push('/books'))\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>Add Unit</strong></h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"flex-column justify-content-center text-center\">\r\n                    <div className=\"form-group\">\r\n                        <label>Unit number</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Unit number\" onChange={onChangeNumbers}/>\r\n                    </div>\r\n                    <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\" onClick={addUnits}>Add Unit</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state:{units:IreduceUnits}) => {\r\n    return {\r\n        units:state.units\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            showUnits\r\n        }, dispatch)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddUnit);","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport * as API from \"./../../api/api\"\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {IaddWords} from \"../../interfaces/IaddWords\";\r\nimport {IreduceWords} from \"../../interfaces/IreduceWords\";\r\n\r\ntype AddWordsProps = {\r\n    words:IreduceWords;\r\n}\r\n\r\nconst AddWords:FC<AddWordsProps> = (props:AddWordsProps) => {\r\n\r\n    const rows:number=5;\r\n\r\n    const [words,setWords] = useState<string[]>([]);\r\n\r\n    const onChangeWords = (e:ChangeEvent<HTMLTextAreaElement>) =>{\r\n        const word:string = e.target.value;\r\n        const arr:string[] = word.split(\",\");\r\n        setWords(arr);\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    const addWords = ():void => {\r\n        const data:IaddWords = {word:words,id:props.words.keyWords};\r\n        API.putWords(data)\r\n            .then(res => console.log(res))\r\n            .then(() => history.push(\"/books\"))\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-content\">\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row margin-t\">\r\n                    <div className=\"col-lg-10 mx-auto\">\r\n                        <h1 className=\"text-uppercase text-center\"><strong>Add Words</strong></h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"flex-column justify-content-center text-center\">\r\n                    <div className=\"form-group\">\r\n                        <label>Add Words wish this --,-- </label>\r\n                        <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows={rows} onChange={onChangeWords}></textarea>\r\n                    </div>\r\n                    <p className=\"btn btn-dark btn-xl  rounded-pill \" role=\"button\" onClick={addWords}>Add Words</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state:{words:IreduceWords}) => {\r\n    return {\r\n        words:state.words\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(AddWords)","import React,{FC} from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\nimport AddBook from \"./../components/AddBook/AddBook\";\r\nimport AddUnit from './../components/AddUnit/AddUnit';\r\nimport AddWords from \"./../components/AddWords/AddWords\";\r\n\r\n\r\nconst UserPage:FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/addbook\" exact>\r\n                <AddBook/>\r\n            </Route>\r\n            <Route path=\"/addunit\" exact>\r\n                <AddUnit/>\r\n            </Route>\r\n            <Route path=\"/addwords\" exact>\r\n                <AddWords/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default UserPage","import React, {FC,useEffect,useState} from 'react';\r\nimport { BrowserRouter} from 'react-router-dom';\r\nimport Header from \"./components/Header/Header\";\r\nimport \"./App.css\"\r\nimport {connect} from \"react-redux\";\r\nimport Login from \"./containers/Login\"\r\nimport UserPage from \"./containers/UserPage\"\r\nimport AddInfo from \"./containers/AddInfo\"\r\nimport {getBooks, laptop, large, showBooks, smart, tablet} from \"./store/actions/actions\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport * as API from \"./api/api\";\r\nimport {getSize,getArrayAndId} from \"./services/service\";\r\nimport {IreduceLogin} from \"./interfaces/IreduceLogin\";\r\nimport {IreduceBooks} from \"./interfaces/IreduceBooks\";\r\n\r\ntype arrayBooks={ name:string, version:string, keyUnit:number }[]\r\n\r\ntype AppProps = {\r\n    large:() => {type:string};\r\n    laptop:() => {type:string};\r\n    tablet:() => {type:string};\r\n    smart:() => {type:string};\r\n    showBooks:() => {type:string};\r\n    getBooks:(dataBooks:arrayBooks,id:number) => {type:string,id:number,dataBooks:arrayBooks};\r\n    loginUser:{isAutofication:boolean};\r\n}\r\n\r\nconst App:FC<AppProps> = (props:AppProps) => {\r\n\r\n    useEffect(()=>{\r\n        API.getBooks()\r\n            .then(res => !!res.data ? getArrayAndId(res.data,props.getBooks) :false)\r\n            .then(res => res ? getSize():false)\r\n            .then(res => {\r\n                if(res === \"large\"){\r\n                    props.large();\r\n                    return true\r\n                }else if(res === \"laptop\"){\r\n                    props.laptop();\r\n                    return true\r\n                }else if(res === \"tablet\"){\r\n                    props.tablet();\r\n                    return true\r\n                }else if(res === \"mobile\"){\r\n                    props.smart();\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n            })\r\n            .then(res => res ? props.showBooks():console.log(\"error\"))\r\n    },[]);\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"bg-image\">\r\n                <Header/>\r\n                <Login/>\r\n                <UserPage isAdmin={props.loginUser.isAutofication}/>\r\n                <AddInfo/>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state:{login:IreduceLogin,books:IreduceBooks}) => {\r\n    return {\r\n        loginUser:state.login,\r\n        books:state.books\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        dispatch,\r\n        ...bindActionCreators({\r\n            getBooks,showBooks,smart,tablet,laptop,large\r\n        }, dispatch)\r\n    }\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const updateObject = (oldObject:any, updatedValues:any) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedValues\r\n    }\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IreduceLogin} from \"../../interfaces/IreduceLogin\";\r\n\r\nconst initialState:IreduceLogin = {\r\n    isAutofication:false\r\n};\r\n\r\n\r\nconst login = ( state:IreduceLogin = initialState, action:any ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.LOGIN:\r\n            return updateObject(state, {\r\n                isAutofication:true\r\n            });\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default login;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IreduceBooks} from \"../../interfaces/IreduceBooks\";\r\n\r\ntype arrayType={ name:string, version:string, keyUnit:number }[] |[]\r\n\r\nconst initialState:IreduceBooks = {\r\n    id:0,\r\n    fullBooks:[],\r\n    showBooking:[],\r\n    indexEnd:6,\r\n    indexStart:0\r\n};\r\n\r\nconst getArrayShow = (arr:arrayType,begin:number,end:number) => {\r\n        return arr.slice(begin, end)\r\n};\r\nconst getPrewBegin = (arr:arrayType,begin:number) => {\r\n    if(begin-1 < 0){\r\n        return 0\r\n    }else{\r\n        return begin-1\r\n    }\r\n};\r\nconst getPrewEnd = (arr:arrayType,end:number,begin:number) => {\r\n    if(begin-1 < 0){\r\n        return end\r\n    }else{\r\n        return end-1\r\n    }\r\n};\r\nconst getNextBegin = (arr:arrayType,begin:number,end:number) => {\r\n    if(end === arr.length || end > arr.length){\r\n        return begin\r\n    }else{\r\n        return begin+1\r\n    }\r\n};\r\nconst getNextEnd = (arr:arrayType,end:number) => {\r\n    if(end === arr.length || end > arr.length){\r\n        return end\r\n    }else{\r\n        return end+1\r\n    }\r\n};\r\n\r\nconst books = ( state:IreduceBooks = initialState, action:any ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.GET_BOOKS:\r\n            return updateObject(state,{\r\n                fullBooks:action.dataBooks,\r\n                id:action.id\r\n            });\r\n        case actionTypes.SET_SHOW_BOOKS:\r\n            return updateObject(state,{\r\n                showBooking:getArrayShow(state.fullBooks,state.indexStart,state.indexEnd)\r\n            });\r\n        case actionTypes.SMART:\r\n            return updateObject(state,{\r\n                indexEnd:1\r\n            });\r\n        case actionTypes.TABLET:\r\n            return updateObject(state,{\r\n                indexEnd:2\r\n            });\r\n        case actionTypes.LAPTOP:\r\n            return updateObject(state,{\r\n                indexEnd:3\r\n            });\r\n        case actionTypes.LARGE:\r\n            return updateObject(state,{\r\n                indexEnd:6\r\n            });\r\n        case actionTypes.PREW:\r\n            return updateObject(state,{\r\n                indexEnd:getPrewEnd(state.fullBooks,state.indexEnd,state.indexStart),\r\n                indexStart:getPrewBegin(state.fullBooks,state.indexStart)\r\n            });\r\n        case actionTypes.NEXT:\r\n            return updateObject(state,{\r\n                indexEnd:getNextEnd(state.fullBooks,state.indexEnd),\r\n                indexStart:getNextBegin(state.fullBooks,state.indexStart,state.indexEnd)\r\n            });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default books;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IreduceUnits} from \"../../interfaces/IreduceUnits\";\r\n\r\ntype arrayType={ name:string, version:string, keyWords:number }[] |[]\r\n\r\nconst initialState:IreduceUnits = {\r\n    fullUnits:[],\r\n    showUniting:[],\r\n    indexEnd:6,\r\n    indexStart:0,\r\n    keyUnit:0\r\n};\r\n\r\nconst getPrewBegin = (arr:arrayType,begin:number) => {\r\n    if(begin-1 < 0){\r\n        return 0\r\n    }else{\r\n        return begin-1\r\n    }\r\n};\r\nconst getPrewEnd = (arr:arrayType,end:number,begin:number) => {\r\n    if(begin-1 < 0){\r\n        return end\r\n    }else{\r\n        return end-1\r\n    }\r\n};\r\nconst getNextBegin = (arr:arrayType,begin:number,end:number) => {\r\n    if(end === arr.length || end > arr.length){\r\n        return begin\r\n    }else{\r\n        return begin+1\r\n    }\r\n};\r\nconst getNextEnd = (arr:arrayType,end:number) => {\r\n    if(end === arr.length || end > arr.length){\r\n        return end\r\n    }else{\r\n        return end+1\r\n    }\r\n};\r\n\r\nconst units = ( state:IreduceUnits = initialState, action:any ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.GET_UNITS:\r\n            return updateObject(state,{\r\n                fullUnits:action.dataUnits\r\n            });\r\n        case actionTypes.SET_SHOW_UNITS:\r\n            return updateObject(state,{\r\n                showUniting:state.fullUnits.slice(state.indexStart,state.indexEnd)\r\n            });\r\n        case actionTypes.SMART:\r\n            return updateObject(state,{\r\n                indexEnd:1\r\n            });\r\n        case actionTypes.TABLET:\r\n            return updateObject(state,{\r\n                indexEnd:2\r\n            });\r\n        case actionTypes.LAPTOP:\r\n            return updateObject(state,{\r\n                indexEnd:3\r\n            });\r\n        case actionTypes.LARGE:\r\n            return updateObject(state,{\r\n                indexEnd:6\r\n            });\r\n        case actionTypes.PREW:\r\n            return updateObject(state,{\r\n                indexEnd:getPrewEnd(state.fullUnits,state.indexEnd,state.indexStart),\r\n                indexStart:getPrewBegin(state.fullUnits,state.indexStart)\r\n            });\r\n        case actionTypes.NEXT:\r\n            return updateObject(state,{\r\n                indexEnd:getNextEnd(state.fullUnits,state.indexEnd),\r\n                indexStart:getNextBegin(state.fullUnits,state.indexStart,state.indexEnd)\r\n            });\r\n        case actionTypes.RESET:\r\n            return updateObject(state,{\r\n                fullUnits:[],\r\n                showUniting:[],\r\n                indexEnd:6,\r\n                indexStart:0,\r\n                keyUnit:0\r\n            });\r\n        case actionTypes.KEY_UNIT:\r\n            return updateObject(state,{\r\n                keyUnit:action.key\r\n            })\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default units;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport {IreduceWords} from \"../../interfaces/IreduceWords\";\r\n\r\nconst initialState:IreduceWords = {\r\n    fullWords:[],\r\n    keyWords:0\r\n};\r\n\r\n\r\nconst words = ( state:IreduceWords = initialState, action:any ) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.GET_WORDS:\r\n            return updateObject(state,{\r\n                fullWords:action.dataWords\r\n            });\r\n        case actionTypes.KEY_WORDS:\r\n            return updateObject(state,{\r\n                keyWords:action.key\r\n            })\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default words;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport login from \"./store/reducers/login\"\r\nimport books from \"./store/reducers/books\";\r\nimport units from \"./store/reducers/units\";\r\nimport words from \"./store/reducers/words\";\r\nimport {IreduceLogin} from \"./interfaces/IreduceLogin\";\r\nimport {IreduceWords} from \"./interfaces/IreduceWords\";\r\nimport {IreduceUnits} from \"./interfaces/IreduceUnits\";\r\nimport {IreduceBooks} from \"./interfaces/IreduceBooks\";\r\n\r\nconst rootReducer = combineReducers<{login:IreduceLogin,books:IreduceBooks,units:IreduceUnits,words:IreduceWords}>({\r\n    login:login,\r\n    books:books,\r\n    units:units,\r\n    words:words\r\n});\r\nconst logger = (store:any) => {\r\n    return (next:any) => {\r\n        return (action:any) => {\r\n            console.log('[Middleware] Dispatching', action);\r\n            const result = next(action);\r\n            console.log('[Middleware] next state', store.getState());\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}